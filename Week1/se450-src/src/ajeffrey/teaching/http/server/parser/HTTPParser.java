/* Generated By:JavaCC: Do not edit this line. HTTPParser.java */
package ajeffrey.teaching.http.server.parser;

import java.net.URL;
import java.net.MalformedURLException;

public class HTTPParser implements HTTPRequestMultiplexer, HTTPParserConstants {

    /*
     * A multiplexer
     */
    final HTTPRequestMultiplexer multiplexer =
        HTTPRequestMultiplexer.factory.build ();

    public void handleGetRequest (final URL url) {
        multiplexer.handleGetRequest (url);
    }

    public void addHTTPRequestHandler (final HTTPRequestHandler handler) {
        multiplexer.addHTTPRequestHandler (handler);
    }

    public void removeHTTPRequestHandler (final HTTPRequestHandler handler) {
        multiplexer.removeHTTPRequestHandler (handler);
    }

/*
 * Nonterminals
 */
  final public void HTTPRequest() throws ParseException {
    getRequest();
  }

  final public void getRequest() throws ParseException {
  URL url;
    jj_consume_token(GET);
    jj_consume_token(SPACE);
    url = url();
    jj_consume_token(SPACE);
    protocol();
    jj_consume_token(CRLF);
    handleGetRequest (url);
  }

  final public URL url() throws ParseException {
  String fileName;
  String hostName = "localhost";
  int port = -1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HTTP:
      jj_consume_token(HTTP);
      jj_consume_token(COLON);
      jj_consume_token(SLASH);
      jj_consume_token(SLASH);
      hostName = hostName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        port = port();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    fileName = fileName();
    try {
      {if (true) return new URL ("http", hostName, port, fileName);}
    } catch (final MalformedURLException ex) {
      {if (true) throw new ParseException ("Malformed URL");}
    }
    throw new Error("Missing return statement in function");
  }

  final public String hostName() throws ParseException {
  String result;
    result = string();
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public int port() throws ParseException {
  int result;
    result = number();
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String fileName() throws ParseException {
  StringBuffer result = new StringBuffer ();
  String tmp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SLASH:
      jj_consume_token(SLASH);
              result.append ("/");
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      tmp = string();
                      result.append (tmp);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLASH:
        jj_consume_token(SLASH);
                result.append ("/");
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
    }
    {if (true) return result.toString ();}
    throw new Error("Missing return statement in function");
  }

  final public String protocol() throws ParseException {
  String result;
    jj_consume_token(HTTP);
    jj_consume_token(SLASH);
    result = string();
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String string() throws ParseException {
  Token t;
    t = jj_consume_token(STRING);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public int number() throws ParseException {
  Token t;
    t = jj_consume_token(NUMBER);
    {if (true) return Integer.parseInt (t.image);}
    throw new Error("Missing return statement in function");
  }

  public HTTPParserTokenManager token_source;
  ASCII_CharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  final private int[] jj_la1_0 = {0x10,0x4,0x40,0x4000,0x40,};

  public HTTPParser(java.io.InputStream stream) {
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new HTTPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public HTTPParser(java.io.Reader stream) {
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new HTTPParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public HTTPParser(HTTPParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public void ReInit(HTTPParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[15];
    for (int i = 0; i < 15; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 15; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
