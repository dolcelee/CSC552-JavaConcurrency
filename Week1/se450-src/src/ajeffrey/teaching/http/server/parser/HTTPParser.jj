options
{
  STATIC=false;
}

PARSER_BEGIN (HTTPParser)

package ajeffrey.teaching.http.server.parser;

import java.net.URL;
import java.net.MalformedURLException;

public class HTTPParser implements HTTPRequestMultiplexer {

    /*
     * A multiplexer
     */
    final HTTPRequestMultiplexer multiplexer = 
        HTTPRequestMultiplexer.factory.build ();

    public void handleGetRequest (final URL url) {
	multiplexer.handleGetRequest (url);
    }

    public void addHTTPRequestHandler (final HTTPRequestHandler handler) {
	multiplexer.addHTTPRequestHandler (handler);
    }

    public void removeHTTPRequestHandler (final HTTPRequestHandler handler) {
	multiplexer.removeHTTPRequestHandler (handler);
    }

}

PARSER_END (HTTPParser)

/*
 * The terminals of the grammar.
 */
TOKEN : {
  <GET: "GET" | "get">
| <HTTP: "HTTP" | "http">
| <SPACE: " ">
| <COLON: ":">
| <DOT: ".">
| <SLASH: "/">
| <UNDERSCORE: "_">
| <MINUS: "-">
| <CRLF: "\n" | "\r" | "\r\n">
| <DIGIT: ["0"-"9"]>
| <ALPHABETIC: ["a"-"z","A"-"Z"]>
| <CHAR: (<ALPHABETIC> | <DIGIT> | <DOT> | <MINUS> | <UNDERSCORE>)>
| <NUMBER: (<DIGIT>)+>
| <STRING: (<CHAR>)+>
}

/*
 * Nonterminals
 */

void HTTPRequest () : {} {
  getRequest ()
}

void getRequest () : {
  URL url;
}{
  <GET> <SPACE> url = url () <SPACE> protocol () <CRLF>
  { handleGetRequest (url); }
}

URL url () : {
  String fileName; 
  String hostName = "localhost"; 
  int port = -1; 
}{
  [
    <HTTP> <COLON> <SLASH> <SLASH> hostName = hostName ()
    [ <COLON> port = port () ]
  ]
  fileName = fileName()
  { try {
      return new URL ("http", hostName, port, fileName); 
    } catch (final MalformedURLException ex) {
      throw new ParseException ("Malformed URL");
    } }
}

String hostName () : { 
  String result; 
}{
  result = string () 
  { return result; }
}

int port () : { 
  int result; 
}{
  result = number ()
  { return result; }
}

String fileName () : {
  StringBuffer result = new StringBuffer (); 
  String tmp; 
}{
  [ <SLASH> { result.append ("/"); } ]
  (
    tmp = string () { result.append (tmp); }
    [ <SLASH> { result.append ("/"); } ]
  )*
  { return result.toString (); }
}

String protocol () : { 
  String result; 
}{
  <HTTP> <SLASH> result = string ()
  { return result; }
}

String string () : { 
  Token t; 
}{
  t=<STRING>
  { return t.image; }
}

int number () : {
  Token t; 
}{
  t=<NUMBER>
  { return Integer.parseInt (t.image); }
}
