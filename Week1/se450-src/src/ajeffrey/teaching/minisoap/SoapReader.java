/* Generated By:JavaCC: Do not edit this line. SoapReader.java */
package ajeffrey.teaching.minisoap;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.lang.reflect.Array;

import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.util.WeakHashMap;

import ajeffrey.teaching.debug.Debug;

class SoapReaderFactoryImpl implements SoapReaderFactory {

    public SoapReader build (final InputStream in) {
        return new SoapReader (in);
    }

    public SoapReader build (final Reader in) {
        return new SoapReader (in);
    }

}

public class SoapReader implements SoapReaderConstants {

    public static SoapReaderFactory factory = new SoapReaderFactoryImpl ();

    protected final WeakHashMap cache = new WeakHashMap (); // NEW

    public Object unserialize () throws IOException {
        Debug.out.println ("SoapReader.unserialize: Starting");
        try {
            final Object result = topLevel ();
             Debug.out.println ("SoapReader.unserialize: Returning");
            return result;
        } catch (final ParseException ex) {
            Debug.out.println ("SoapReader.unserialize: Caught " + ex);
            throw new SoapException ("Caught " + ex);
        } catch (final ClassNotFoundException ex) {
            Debug.out.println ("SoapReader.unserialize: Caught " + ex);
            throw new SoapException ("Caught " + ex);
        } catch (final InstantiationException ex) {
            Debug.out.println ("SoapReader.unserialize: Caught " + ex);
            throw new SoapException ("Caught " + ex);
        } catch (final IllegalAccessException ex) {
            Debug.out.println ("SoapReader.unserialize: Caught " + ex);
            throw new SoapException ("Caught " + ex);
        }
    }

  final public Object topLevel() throws ParseException, ClassNotFoundException, IllegalAccessException, InstantiationException {
   Object result;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(SPACE);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGINOBJECT:
    case NULL:
      result = object();
                             {if (true) return result;}
      break;
    case BEGINHANDLE:
      result = handle();
                             {if (true) return result;}
      break;
    case BEGINSTRING:
      result = string();
                             {if (true) return result;}
      break;
    case BEGINARRAY:
      result = array();
                            {if (true) return result;}
      break;
    case 0:
      jj_consume_token(0);
                {if (true) return null;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// NEW
  final public Object handle() throws ParseException {
  String id;
    jj_consume_token(BEGINHANDLE);
    jj_consume_token(SPACE);
    jj_consume_token(HREF);
    jj_consume_token(EQUALS);
    id = stringLiteral();
    jj_consume_token(SLASHGT);
    {if (true) return cache.get (id);}
    throw new Error("Missing return statement in function");
  }

// END NEW
  final public Object object() throws ParseException, ClassNotFoundException, IllegalAccessException, InstantiationException {
    String className; String id; Object result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGINOBJECT:
      jj_consume_token(BEGINOBJECT);
      jj_consume_token(SPACE);
      jj_consume_token(CLASS);
      jj_consume_token(EQUALS);
      className = stringLiteral();
      jj_consume_token(SPACE);
      jj_consume_token(ID);
      jj_consume_token(EQUALS);
      id = stringLiteral();
      jj_consume_token(GT);
      // NEW
          result = fields(className, id);
      jj_consume_token(ENDOBJECT);
      {if (true) return result;}
      break;
    case NULL:
      jj_consume_token(NULL);
             {if (true) return null;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// NEW id parameter
  final public Object fields(final String className, final String id) throws ParseException, ClassNotFoundException, IllegalAccessException, InstantiationException {
    final Class objClass = Class.forName (className);
    final Object result = objClass.newInstance ();
    cache.put ("#" + id, result); // NEW
    final Field[] fields = objClass.getFields ();
    int fieldNum = 0;
    Object tmpObject; String tmpString; int tmpInt;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEGINSTRING:
      case BEGININT:
      case BEGINHANDLE:
      case BEGINOBJECT:
      case BEGINARRAY:
      case NULL:
      case SPACE:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEGINOBJECT:
      case NULL:
        tmpObject = object();
                                  fields[fieldNum++].set (result, tmpObject);
        break;
      case BEGINHANDLE:
        tmpObject = handle();
                                  fields[fieldNum++].set (result, tmpObject);
        break;
      case BEGINSTRING:
        tmpString = string();
                                  fields[fieldNum++].set (result, tmpString);
        break;
      case BEGINARRAY:
        tmpObject = array();
                                 fields[fieldNum++].set (result, tmpObject);
        break;
      case BEGININT:
        tmpInt = integer();
                                fields[fieldNum++].setInt (result, tmpInt);
        break;
      case SPACE:
        jj_consume_token(SPACE);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      while (fieldNum < fields.length && Modifier.isStatic (fields[fieldNum].getModifiers ())) { fieldNum++ ; }
    }
        if (fieldNum == fields.length) {
            {if (true) return result;}
        } else {
            {if (true) throw new SoapException ("Not enough fields for " + objClass);}
        }
    throw new Error("Missing return statement in function");
  }

  final public String string() throws ParseException {
    String result;
    jj_consume_token(BEGINSTRING);
    jj_consume_token(SPACE);
    jj_consume_token(VALUE);
    jj_consume_token(EQUALS);
    result = stringLiteral();
    jj_consume_token(SLASHGT);
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Object array() throws ParseException, ClassNotFoundException, IllegalAccessException, InstantiationException {
    String typeName;
    Class type;
    String lengthName;
    int length;
    String id;
    Object result;
    int index=0;
    Object tmpObject; String tmpString; int tmpInt;
    jj_consume_token(BEGINARRAY);
    jj_consume_token(SPACE);
    jj_consume_token(CLASS);
    jj_consume_token(EQUALS);
    typeName = stringLiteral();
    jj_consume_token(SPACE);
    jj_consume_token(LENGTH);
    jj_consume_token(EQUALS);
    lengthName = stringLiteral();
    jj_consume_token(SPACE);
    jj_consume_token(ID);
    jj_consume_token(EQUALS);
    id = stringLiteral();
    jj_consume_token(GT);
       type = Class.forName (typeName);
       length = Integer.parseInt (lengthName);
       result = Array.newInstance (type, length);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEGINSTRING:
      case BEGININT:
      case BEGINHANDLE:
      case BEGINOBJECT:
      case BEGINARRAY:
      case NULL:
      case SPACE:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEGINOBJECT:
      case NULL:
        tmpObject = object();
                                  Array.set (result, index++, tmpObject);
        break;
      case BEGINHANDLE:
        tmpObject = handle();
                                  Array.set (result, index++, tmpObject);
        break;
      case BEGINSTRING:
        tmpString = string();
                                  Array.set (result, index++, tmpString);
        break;
      case BEGINARRAY:
        tmpObject = array();
                                 Array.set (result, index++, tmpObject);
        break;
      case BEGININT:
        tmpInt = integer();
                                Array.setInt (result, index++, tmpInt);
        break;
      case SPACE:
        jj_consume_token(SPACE);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(ENDARRAY);
        if (index == length) {
            {if (true) return result;}
        } else {
            {if (true) throw new SoapException ("Not enough array elements");}
        }
    throw new Error("Missing return statement in function");
  }

  final public int integer() throws ParseException {
    String result;
    jj_consume_token(BEGININT);
    jj_consume_token(SPACE);
    jj_consume_token(VALUE);
    jj_consume_token(EQUALS);
    result = stringLiteral();
    jj_consume_token(SLASHGT);
      {if (true) return Integer.parseInt (result);}
    throw new Error("Missing return statement in function");
  }

  final public String stringLiteral() throws ParseException {
    Token t;
    t = jj_consume_token(STRING_LITERAL);
      {if (true) return t.image.substring (1, t.image.length ()-1);}
    throw new Error("Missing return statement in function");
  }

  public SoapReaderTokenManager token_source;
  ASCII_CharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  final private int[] jj_la1_0 = {0x40000,0x15b,0x110,0x4015e,0x4015e,0x4015e,0x4015e,};

  public SoapReader(java.io.InputStream stream) {
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new SoapReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public SoapReader(java.io.Reader stream) {
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new SoapReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public SoapReader(SoapReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public void ReInit(SoapReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[20];
    for (int i = 0; i < 20; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
