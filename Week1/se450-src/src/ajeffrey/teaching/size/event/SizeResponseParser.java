/* Generated By:JavaCC: Do not edit this line. SizeResponseParser.java */
package ajeffrey.teaching.size.event;

import java.io.InputStream;
import java.io.IOException;

/**
 * A parser for SIZE responses.
 * @author Alan Jeffrey
 * @version 1.0.1
 */

public class SizeResponseParser implements SizeResponseMultiplexer, SizeResponseParserConstants {

    /**
     * A factory for building parsers.
     */
    public static final SizeResponseParserFactory factory = new SizeResponseParserFactoryImpl ();

    protected final SizeResponseMultiplexer multiplexer =
        SizeResponseMultiplexer.factory.build ();

    public void addSizeResponseHandler (final SizeResponseHandler handler) {
        multiplexer.addSizeResponseHandler (handler);
    }

    public void removeSizeResponseHandler (final SizeResponseHandler handler) {
        multiplexer.removeSizeResponseHandler (handler);
    }

    public void handleFoundResponse (final String fileName, final long size) throws IOException {
        multiplexer.handleFoundResponse (fileName, size);
    }

    public void handleNotFoundResponse () throws IOException {
        multiplexer.handleNotFoundResponse ();
    }

    public void handleOKResponse () throws IOException {
        multiplexer.handleOKResponse ();
    }

    public void handleEndOfStream () throws IOException {
        multiplexer.handleEndOfStream ();
    }

  final public void parseSizeResponse() throws ParseException, IOException {
    okResponse();
  }

  final public void okResponse() throws ParseException, IOException {
    jj_consume_token(OK);
    handleOKResponse ();
  }

  public SizeResponseParserTokenManager token_source;
  ASCII_CharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  final private int[] jj_la1_0 = {};

  public SizeResponseParser(java.io.InputStream stream) {
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new SizeResponseParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  public SizeResponseParser(java.io.Reader stream) {
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new SizeResponseParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  public SizeResponseParser(SizeResponseParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  public void ReInit(SizeResponseParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[2];
    for (int i = 0; i < 2; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 2; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}

class SizeResponseParserFactoryImpl implements SizeResponseParserFactory {

    public SizeResponseParser build (final InputStream in) {
        return new SizeResponseParser (in);
    }

}
